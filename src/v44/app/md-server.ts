import { AsciiSession, MsgView, IJsFixConfig } from 'jspurefix'
import { IMarketDataRequest, IUserFixArchive, IUserFixArchiveNoEvents, MsgType } from '../../types/FIX44'
import { MDFactory } from './md-factory'
import {MdBaseServer} from "../../common/md-base-server";

// interfaces generated by compiler to make messages easy in an IDE

export class MDServer extends MdBaseServer implements AsciiSession {
  private readonly mdFactory: MDFactory = new MDFactory()

  constructor (public readonly config: IJsFixConfig) {
    super(config)
  }

  protected onApplicationMsg (msgType: string, view: MsgView): void {
    this.logger.info(`${view.toJson()}`)
    switch (msgType) {
      case MsgType.MarketDataRequest: {
        this.marketDataRequest(view)
        break
      }

      case MsgType.UserFixArchive: {
        this.userFixArchive(view)
        break
      }

      default: {
        this.logger.info(`unknown msgType ${msgType}`)
        break
      }
    }
  }

  private marketDataRequest (view: MsgView): void {
    const req: IMarketDataRequest = view.toObject() as IMarketDataRequest
    const symbol: string = req?.InstrmtMDReqGrp?.NoRelatedSym[0].Instrument.Symbol ?? ''
    const id = req.MDReqID
    const price = 1.22759
    const snapshot = this.mdFactory.FullSnapshot(symbol, id, price)
    this.send(MsgType.MarketDataSnapshotFullRefresh, snapshot)
  }

  private userFixArchive (view: MsgView): void {
    const msg: IUserFixArchive = view.toObject() as IUserFixArchive
    const events: IUserFixArchiveNoEvents[] = msg.NoEvents
    this.logger.info(`event count for archive ${events.length}`)
    for (let i = 0; i < events.length; ++i) {
      const ev = events[i]
      const txt = ev.RawData.toString('utf8')
      this.logger.info(`request to archive this message ${txt}`)
    }
  }

  public sendNews (headline: string): void {
    this.send(MsgType.News, this.mdFactory.News(headline))
  }
}
