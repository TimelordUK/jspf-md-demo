import { AsciiSession, MsgView, IJsFixConfig, IJsFixLogger, MsgType } from 'jspurefix'
import { IMarketDataRequest } from '../types'

// interfaces generated by compiler to make messages easy in an IDE

export class MDServer extends AsciiSession {
  private readonly logger: IJsFixLogger
  private readonly fixLog: IJsFixLogger
  private timerHandle: NodeJS.Timer = null

  constructor (public readonly config: IJsFixConfig) {
    super(config)
    this.logReceivedMsgs = true
    this.checkMsgIntegrity = false
    this.logger = config.logFactory.logger(`${this.me}:MDServer`)
    this.fixLog = config.logFactory.plain(`jsfix.${config!.description!.application!.name}.txt`)
  }

  protected onApplicationMsg (msgType: string, view: MsgView): void {
    this.logger.info(`${view.toJson()}`)
    switch (msgType) {
      case MsgType.MarketDataRequest: {
        const req: IMarketDataRequest = view.toObject()
        const ss = view.toString()
        break
      }
    }
  }

  protected onReady (view: MsgView): void {
    // server waits for client to make a request
    this.logger.info('ready for requests.')
  }

  protected onStopped (): void {
    this.logger.info('stopped')
    if (this.timerHandle) {
      clearInterval(this.timerHandle)
    }
  }

  protected onLogon (view: MsgView, user: string, password: string): boolean {
    return true
  }

  // use msgType for example to persist only trade capture messages to database
  protected onDecoded (msgType: string, txt: string): void {
    this.fixLog.info(txt)
  }

  // no delimiter substitution on transmit messages
  protected onEncoded (msgType: string, txt: string): void {
    this.fixLog.info(AsciiSession.asPiped(txt))
  }
}
